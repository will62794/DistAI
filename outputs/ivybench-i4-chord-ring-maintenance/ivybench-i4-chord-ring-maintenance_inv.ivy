#lang ivy1.7

module ring_topology(carrier) = {
    relation btw(X:carrier,Y:carrier, Z:carrier) # Y is on the acyclic path from X to Z

    # Axiom defining the btw relation - note it's not reflexive
    # not needed: axiom btw(X,Y,Z) -> X ~= Y & X ~= Z & Y ~= Z  # anti-reflexive
    axiom btw(W, X, Y) & btw(W, Y, Z) -> btw(W, X, Z)  # transitive
    axiom btw(W, X, Y) -> ~btw(W, Y, X)  # acyclic
    axiom btw(W, X, Y) | btw(W, Y, X) | W=X | X=Y  # total
    axiom (btw(X, Y, Z) & X ~= Z) -> btw(Y, Z, X)  # cyclic permutations
}

#module nodeopology(t) = {
#    relation btw(X:t,Y:t,Z:t)

#    axiom btw(W, Y, Z) & btw(W, X, Y) -> btw(X, Y, Z)
#    property btw(W, X, Z) & btw(X, Y, Z) -> btw(W, X, Y)
#    property btw(W, X, Z) & btw(X, Y, Z) -> btw(W, Y, Z)
#    property btw(W, Y, Z) & btw(W, X, Y) -> btw(W, X, Z)
#    property W = X | btw(W, X, W)
#    property ~btw(X, X, Y)
#    property ~btw(X, Y, Y)
#    property btw(X,Y,Z) |  Y = Z |  btw(X,Z,Y)
#    property btw(X,Y,Z) |  Y = X |  btw(Y,X,Z)
#}

type node

instantiate ring : ring_topology(node)

relation a(X : node)                    # active set
relation s1(X : node, Y : node)         # first successor
relation in_s1(X : node)
relation s2(X : node, Y : node)         # second successor
relation in_s2(X : node)
relation p(X : node, Y : node)          # predecessor

individual org : node
individual other : node
axiom other ~= org

relation reach(X: node)
relation error(X: node)

after init {
    a(X) := X = org | X = other;
    s1(X, Y) := (X = org & Y = other) | (X = other & Y = org);
    in_s1(X) := X = org | X = other;
    s2(X, Y) := false;
    in_s2(X) := false;
    p(X, Y) := (X = org & Y = other) | (X = other & Y = org);
    reach(X) := X = org;
    error(X) := false;
}

action join(x : node, y : node) = {
    require ~a(x);
    require a(y);
#    require ~(a(Z) & ring.btw(x, Z, y));
    require ~ring.btw(x, org, y);
#    assume in_s1(x) -> exists Y. s1(x, Y);
#    assume in_s2(x) -> exists Y. s2(x, Y);
    a(x) := true;
    s1(x, Y) := y = Y;
    in_s1(x) := true;
    s2(x, Y) := false;
    in_s2(x) := false;
    p(x, Y) := false;
}

action stabilize(x : node, y : node, z : node) = {
    require a(x);
    require s1(x, y);
    require a(y);
    require p(y, z);
#    assume a(z);
    require ring.btw(x, z, y);
#    assume in_s1(x) -> exists Y. s1(x, Y);
#    assume in_s2(x) -> exists Y. s2(x, Y);
    s1(x, Z) := Z = z;
    in_s1(x) := true;
    s2(x, Y) := Y = y;
    in_s2(x) := true;
}

action notify(x : node, y : node, z : node)  = {
    require a(x);
    require s1(x, y);
    require a(y);
    require p(y, z) | ~p(y, X);
    require ring.btw(z, x, y);
    p(y, X) := X = x;
}

action inherit(x : node, y : node, z : node) = {
    require a(x);
    require s1(x, y);
    require a(y);
    require s1(y, z);
#    assume in_s2(x) -> exists Y. s2(x, Y);
    s2(x, Z) := Z = z;
    in_s2(x) := true;
}

action remove(x : node, y : node, z : node) = {
    require a(x);
    require s1(x, y);
    require ~a(y);
    require s2(x, z);
#    assume in_s1(x) -> exists Y. s1(x, Y);
#    assume in_s2(x) -> exists Y. s2(x, Y);
    s1(x, Z) := Z = z;
    in_s1(x) := true;
    s2(x, Y) := false;
    in_s2(x) := false;
}

action fail(x : node) = {
    require a(x);
    require x ~= org; # assume origin node cannot fail
    # assume the last active successor of any does not fail
    require (s1(Y, x)) -> in_s2(Y);
    require (s1(Y, x) & s2(Y, Z)) -> a(Z);
    require (s1(X, Y) & s2(X, x)) -> (Y ~= x & a(Y));
#    assume in_s1(x) -> exists Y. s1(x, Y);
#    assume in_s2(x) -> exists Y. s2(x, Y);
    a(x) := false;
    p(x, Y) := false;
    s1(x, Y) := false;
    in_s1(x) := false;
    s2(x, Y) := false;
    in_s2(x) := false;
#    assume (~s1(X, Y) | a(Y) | in_s2(X));
#    assume (~s1(X, Y) | a(Y) | ~s2(X, Z) | a(Z));
}

action reach_org(x : node, y : node, z : node) = {
    require (s1(x, y) & a(y) & reach(y)) | (s1(x, y) & ~a(y) & s2(x, z) & a(z) & reach(z));
    reach(x) := true;
}

action remove_org(x : node, y : node, z : node) = {
    require x ~= org;
    require s1(x, y);
    require (~a(y) | ~reach(y));
    require ~a(y) -> (~s2(x, Z) | s2(x, z));
    require (~a(y) & s2(x, z)) -> (~a(z) | ~reach(z));
#    require (s1(x, y) & a(y) & ~reach(y)) | (s1(x, y) & ~a(y) & s2(x, z) & (a(z) & ~reach(z)));
    reach(x) := false;
}

action test(x : node) = {
    require (s1(X, Y) & a(Y) & reach(Y)) -> reach(X);
    require (s1(X, Y) & ~a(Y) & s2(X, Z) & a(Z) & reach(Z)) -> reach(X);
    require (ring.btw(x, Y, org) & a(Y)) -> reach(Y);
    require a(x);
    require ~reach(x);
    require in_s1(x) -> exists Y. s1(x, Y);
    require in_s2(x) -> exists Y. s2(x, Y);
    error(x) := true;
}

export join
export stabilize
export inherit
export remove
export notify
export reach_org
export remove_org
export fail
export test

invariant [1000000] ~error(N)

invariant [1000] forall N1:node. ~org=N1 | ~other=N1
invariant [1001] forall N1:node. a(N1) | ~s1(N1,N1)
invariant [1002] forall N1:node. a(N1) | ~in_s1(N1)
invariant [1003] forall N1:node. in_s2(N1) | ~s2(N1,N1)
invariant [1004] forall N1:node. a(N1) | ~s2(N1,N1)
invariant [1005] forall N1:node. a(N1) | ~in_s2(N1)
invariant [1006] forall N1:node. in_s1(N1) | ~in_s2(N1)
invariant [1007] forall N1:node. a(N1) | ~org=N1
invariant [1008] forall N1:node. in_s1(N1) | ~s2(N1,N1)
invariant [1009] forall N1:node. in_s1(N1) | ~a(N1)
invariant [1010] forall N1:node. org=N1 | ~s1(N1,N1)
invariant [1011] forall N1:node. in_s1(N1) | ~s1(N1,N1)
invariant [1012] forall N1:node. in_s1(N1) | ~org=N1
invariant [1013] forall N1:node. reach(N1) | ~s1(N1,N1)
invariant [1014] forall N1:node. s2(N1,N1) | ~s1(N1,N1) | ~in_s2(N1)
invariant [1015] forall N1:node. reach(N1) | ~org=N1
invariant [1016] forall N1:node. ~s1(N1,N1) | ~other=N1
invariant [2000] forall N1:node, N2:node. N1 ~= N2 -> ~s2(N1,N1) | ~s2(N1,N2)
invariant [2001] forall N1:node, N2:node. N1 ~= N2 -> in_s1(N1) | ~s1(N1,N2)
invariant [2002] forall N1:node, N2:node. N1 ~= N2 -> ~s1(N1,N1) | ~s1(N1,N2)
invariant [2003] forall N1:node, N2:node. N1 ~= N2 -> reach(N1) | org=N2 | ~s1(N2,N1) | ~s2(N2,N2)
invariant [2004] forall N1:node, N2:node. N1 ~= N2 -> ~s1(N1,N1) | ~s1(N2,N2)
invariant [2005] forall N1:node, N2:node. N1 ~= N2 -> org=N1 | ~s1(N2,N1) | ~s2(N2,N1)
invariant [2006] forall N1:node, N2:node. N1 ~= N2 -> org=N1 | org=N2 | ~s1(N1,N2) | ~s2(N1,N1)
invariant [2007] forall N1:node, N2:node. N1 ~= N2 -> ~s1(N1,N1) | ~s2(N1,N2)
invariant [2008] forall N1:node, N2:node. N1 ~= N2 -> in_s2(N1) | ~s2(N1,N2)
invariant [2009] forall N1:node, N2:node. N1 ~= N2 -> in_s1(N1) | ~s2(N1,N2)
invariant [2010] forall N1:node, N2:node. N1 ~= N2 -> reach(N1) | ~s1(N2,N1) | ~s2(N2,N1)
invariant [2011] forall N1:node, N2:node. N1 ~= N2 -> a(N1) | ~s1(N2,N1) | ~s2(N2,N2) | ~other=N2
invariant [2012] forall N1:node, N2:node. N1 ~= N2 -> ~org=N1 | ~org=N2
invariant [2013] forall N1:node, N2:node. N1 ~= N2 -> ~other=N1 | ~other=N2
invariant [2014] forall N1:node, N2:node. N1 ~= N2 -> ~s1(N1,N1) | ~org=N2
invariant [2015] forall N1:node, N2:node. N1 ~= N2 -> reach(N1) | ~s1(N1,N2) | ~s1(N2,N1) | ~other=N2
invariant [2016] forall N1:node, N2:node. N1 ~= N2 -> reach(N1) | org=N2 | ~s1(N1,N2) | ~s1(N2,N1)
invariant [2017] forall N1:node, N2:node. N1 ~= N2 -> ~s1(N1,N2) | ~s2(N1,N2) | ~other=N2
invariant [2018] forall N1:node, N2:node. N1 ~= N2 -> in_s1(N1) | ~s1(N2,N1) | ~s2(N2,N1)
invariant [2019] forall N1:node, N2:node. N1 ~= N2 -> a(N1) | in_s2(N2) | ~s1(N2,N1)
invariant [2020] forall N1:node, N2:node. N1 ~= N2 -> a(N1) | ~s1(N2,N1) | ~s2(N2,N1)
invariant [2021] forall N1:node, N2:node. N1 ~= N2 -> a(N1) | org=N2 | ~s1(N2,N1) | ~s2(N2,N2)
invariant [2022] forall N1:node, N2:node. N1 ~= N2 -> a(N1) | ~s2(N1,N2)
invariant [2023] forall N1:node, N2:node. N1 ~= N2 -> s1(N1,N2) | ~s2(N1,N1) | ~org=N2
invariant [2024] forall N1:node, N2:node. N1 ~= N2 -> in_s1(N1) | reach(N2) | ~s1(N2,N1) | ~s2(N2,N2)
invariant [2025] forall N1:node, N2:node. N1 ~= N2 -> a(N1) | reach(N2) | ~s1(N2,N1) | ~s2(N2,N2)
invariant [2026] forall N1:node, N2:node. N1 ~= N2 -> org=N1 | ~s1(N1,N2) | ~s2(N1,N1) | ~other=N2
invariant [2027] forall N1:node, N2:node. N1 ~= N2 -> in_s1(N1) | in_s2(N2) | ~s1(N2,N1)
invariant [2028] forall N1:node, N2:node. N1 ~= N2 -> in_s1(N1) | org=N2 | ~s1(N2,N1) | ~s2(N2,N2)
invariant [2029] forall N1:node, N2:node. N1 ~= N2 -> a(N1) | ~s1(N1,N2)
invariant [2030] forall N1:node, N2:node. N1 ~= N2 -> reach(N1) | ~s1(N1,N2) | ~s2(N1,N1) | ~other=N2
invariant [2031] forall N1:node, N2:node. N1 ~= N2 -> in_s1(N1) | ~s1(N2,N1) | ~s2(N2,N2) | ~other=N2
invariant [2032] forall N1:node, N2:node. N1 ~= N2 -> reach(N1) | reach(N2) | ~s1(N1,N2) | ~s2(N1,N1)
invariant [2033] forall N1:node, N2:node. N1 ~= N2 -> org=N1 | ~s1(N1,N2) | ~s1(N2,N1) | ~other=N2
invariant [2034] forall N1:node, N2:node. N1 ~= N2 -> reach(N1) | reach(N2) | ~s1(N1,N2) | ~s1(N2,N1)
invariant [2035] forall N1:node, N2:node. N1 ~= N2 -> reach(N1) | ~s1(N2,N1) | ~s2(N2,N2) | ~other=N2
invariant [2036] forall N1:node, N2:node. N1 ~= N2 -> ~s1(N1,N2) | ~s2(N1,N2) | ~org=N1
invariant [2037] forall N1:node, N2:node. N1 ~= N2 -> org=N1 | org=N2 | ~s1(N1,N2) | ~s1(N2,N1)
invariant [2038] forall N1:node, N2:node. N1 ~= N2 -> org=N1 | ~s1(N2,N1) | ~s2(N2,N2) | ~other=N2
invariant [2039] forall N1:node, N2:node. N1 ~= N2 -> reach(N1) | org=N2 | ~s1(N1,N2) | ~s2(N1,N1)
invariant [3000] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N1,N2) | ~s1(N3,N2) | ~s2(N1,N3) | ~org=N1
invariant [3001] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N1,N1) | ~s1(N3,N2) | ~ring.btw(N1,N2,N3)
invariant [3002] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N2,N1) | ~ring.btw(N1,N2,N3) | ~org=N3
invariant [3003] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> reach(N2) | ring.btw(N1,N2,N3) | ~s1(N1,N2) | ~s1(N2,N3)
invariant [3004] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | ~s1(N1,N2) | ~s2(N1,N3) | ~org=N1
invariant [3005] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | ~s1(N3,N1) | ~s2(N3,N2) | ~other=N1
invariant [3006] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | ~s1(N2,N3) | ~s2(N2,N1) | ~other=N3
invariant [3007] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | ~s1(N1,N2) | ~s1(N3,N3)
invariant [3008] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> s1(N2,N3) | ~s2(N2,N1) | ~ring.btw(N1,N2,N3) | ~org=N3
invariant [3009] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | ~s1(N1,N2) | ~s1(N2,N3) | ~s1(N3,N1)
invariant [3010] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | ~s1(N1,N2) | ~org=N3
invariant [3011] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> s1(N1,N2) | ~s1(N2,N2) | ~s2(N1,N3) | ~ring.btw(N1,N2,N3)
invariant [3012] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s2(N1,N2) | ~s2(N1,N3)
invariant [3013] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | ~s1(N1,N2) | ~s1(N3,N1) | ~s2(N1,N3)
invariant [3014] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N2,N1) | ~s1(N3,N2) | ~s2(N2,N3) | ~ring.btw(N1,N2,N3)
invariant [3015] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> a(N1) | a(N2) | ~s1(N3,N1) | ~s2(N3,N2)
invariant [3016] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N1,N3) | ~s1(N2,N2) | ~ring.btw(N1,N2,N3)
invariant [3017] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> s1(N2,N1) | ring.btw(N1,N2,N3) | ~s1(N1,N1) | ~s2(N2,N3)
invariant [3018] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N1,N2) | ~s1(N1,N3)
invariant [3019] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | ~s1(N1,N1) | ~s1(N2,N3)
invariant [3020] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N1,N3) | ~s1(N2,N1) | ~s2(N1,N3) | ~ring.btw(N1,N2,N3)
invariant [3021] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> reach(N2) | ~s1(N2,N1) | ~s1(N3,N2) | ~ring.btw(N1,N2,N3)
invariant [3022] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | ~s1(N1,N2) | ~s1(N2,N3) | ~s2(N2,N1)
invariant [3023] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> s1(N3,N1) | ~s2(N3,N2) | ~ring.btw(N1,N2,N3) | ~org=N1
invariant [3024] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> reach(N1) | ring.btw(N1,N2,N3) | ~s1(N1,N2) | ~s1(N3,N1)
invariant [3025] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> s1(N2,N1) | ring.btw(N1,N2,N3) | ~s2(N2,N3) | ~org=N1
invariant [3026] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N1,N2) | ~s2(N1,N1) | ~org=N3
invariant [3027] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N2,N1) | ~s2(N2,N3) | ~ring.btw(N1,N2,N3) | ~other=N1
invariant [3028] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N1,N3) | ~s2(N1,N2) | ~ring.btw(N1,N2,N3) | ~org=N1
invariant [3029] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | org=N3 | ~s1(N2,N3) | ~s1(N3,N1)
invariant [3030] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | ~s1(N1,N2) | ~s2(N1,N3) | ~other=N2
invariant [3031] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N1,N2) | ~s2(N1,N2) | ~org=N3
invariant [3032] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | ~s1(N1,N2) | ~s1(N3,N1) | ~other=N1
invariant [3033] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> in_s1(N1) | ~s1(N2,N1) | ~s2(N2,N3) | ~ring.btw(N1,N2,N3)
invariant [3034] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N2,N1) | ~s1(N3,N3) | ~ring.btw(N1,N2,N3)
invariant [3035] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N3,N2) | ~ring.btw(N1,N2,N3) | ~org=N1
invariant [3036] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N3,N2) | ~s2(N3,N1) | ~ring.btw(N1,N2,N3) | ~org=N3
invariant [3037] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> s1(N2,N3) | ~s1(N3,N3) | ~s2(N2,N1) | ~ring.btw(N1,N2,N3)
invariant [3038] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> org=N2 | ~s1(N2,N1) | ~s1(N3,N2) | ~ring.btw(N1,N2,N3)
invariant [3039] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> a(N3) | ring.btw(N1,N2,N3) | ~s1(N2,N3) | ~s2(N2,N1)
invariant [3040] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> s1(N1,N2) | ~s2(N1,N3) | ~ring.btw(N1,N2,N3) | ~org=N2
invariant [3041] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> a(N1) | ~s1(N2,N1) | ~s2(N2,N3) | ~ring.btw(N1,N2,N3)
invariant [3042] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> s1(N1,N3) | ring.btw(N1,N2,N3) | ~s1(N3,N3) | ~s2(N1,N2)
invariant [3043] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> a(N2) | ~s1(N3,N2) | ~s2(N3,N1) | ~ring.btw(N1,N2,N3)
invariant [3044] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> in_s1(N1) | in_s1(N2) | ~s1(N3,N1) | ~s2(N3,N2)
invariant [3045] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> s1(N1,N3) | ring.btw(N1,N2,N3) | ~s2(N1,N2) | ~org=N3
invariant [3046] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> in_s1(N3) | ~s1(N1,N3) | ~s2(N1,N2) | ~ring.btw(N1,N2,N3)
invariant [3047] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | ~s1(N1,N2) | ~s1(N3,N1) | ~s2(N1,N2)
invariant [3048] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> s1(N1,N2) | ~s1(N2,N2) | ~s1(N3,N1) | ~s2(N1,N3)
invariant [3049] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> in_s1(N2) | ring.btw(N1,N2,N3) | ~s1(N1,N2) | ~s2(N1,N3)
invariant [3050] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> s1(N3,N1) | ~s1(N1,N1) | ~s2(N3,N2) | ~ring.btw(N1,N2,N3)
invariant [3051] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N1,N3) | ~ring.btw(N1,N2,N3) | ~org=N2
invariant [3052] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | org=N1 | ~s1(N3,N1) | ~s2(N3,N2)
invariant [3053] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> reach(N1) | ~s1(N2,N1) | ~s2(N2,N3) | ~ring.btw(N1,N2,N3)
invariant [3054] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> in_s1(N2) | ~s1(N3,N2) | ~s2(N3,N1) | ~ring.btw(N1,N2,N3)
invariant [3055] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | ~s1(N2,N2) | ~s1(N3,N1)
invariant [3056] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | org=N3 | ~s1(N2,N3) | ~s2(N2,N1)
invariant [3057] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> reach(N3) | ~s1(N1,N3) | ~s1(N3,N2) | ~ring.btw(N1,N2,N3)
invariant [3058] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> reach(N2) | ~s1(N3,N2) | ~s2(N3,N1) | ~ring.btw(N1,N2,N3)
invariant [3059] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | ~s1(N3,N1) | ~org=N2
invariant [3060] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> reach(N3) | ring.btw(N1,N2,N3) | ~s1(N2,N3) | ~s2(N2,N1)
invariant [3061] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N1,N1) | ~s1(N2,N3) | ~s1(N3,N2)
invariant [3062] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | org=N2 | ~s1(N1,N2) | ~s2(N1,N3)
invariant [3063] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | ~s1(N1,N2) | ~s1(N2,N3) | ~s2(N2,N3)
invariant [3064] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> reach(N1) | ~s1(N1,N3) | ~s1(N2,N1) | ~ring.btw(N1,N2,N3)
invariant [3065] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> s1(N3,N2) | ring.btw(N1,N2,N3) | ~s2(N3,N1) | ~org=N2
invariant [3066] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N2,N1) | ~s1(N3,N2) | ~s2(N2,N1) | ~ring.btw(N1,N2,N3)
invariant [3067] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> a(N3) | ~s1(N1,N3) | ~s2(N1,N2) | ~ring.btw(N1,N2,N3)
invariant [3068] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | ~s1(N2,N3) | ~org=N1
invariant [3069] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | org=N1 | ~s1(N1,N2) | ~s1(N3,N1)
invariant [3070] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N1,N2) | ~s1(N2,N1) | ~org=N3
invariant [3071] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | ~s1(N2,N3) | ~s2(N2,N1) | ~org=N2
invariant [3072] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | ~s1(N2,N3) | ~s1(N3,N1) | ~s2(N3,N1)
invariant [3073] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> a(N2) | ring.btw(N1,N2,N3) | ~s1(N1,N2) | ~s2(N1,N3)
invariant [3074] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | ~s1(N2,N3) | ~s1(N3,N1) | ~other=N3
invariant [3075] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N2,N1) | ~s2(N2,N3) | ~ring.btw(N1,N2,N3) | ~org=N2
invariant [3076] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> org=N1 | ~s1(N1,N3) | ~s1(N2,N1) | ~ring.btw(N1,N2,N3)
invariant [3077] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> org=N1 | ~s1(N2,N1) | ~s2(N2,N3) | ~ring.btw(N1,N2,N3)
invariant [3078] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N1,N3) | ~s1(N2,N1) | ~ring.btw(N1,N2,N3) | ~other=N1
invariant [3079] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | ~s1(N3,N1) | ~s2(N3,N2) | ~org=N3
invariant [3080] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> reach(N1) | ring.btw(N1,N2,N3) | ~s1(N3,N1) | ~s2(N3,N2)
invariant [3081] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> reach(N3) | ~s1(N1,N3) | ~s2(N1,N2) | ~ring.btw(N1,N2,N3)
invariant [3082] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N3,N2) | ~s2(N3,N1) | ~ring.btw(N1,N2,N3) | ~other=N2
invariant [3083] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> org=N2 | ~s1(N3,N2) | ~s2(N3,N1) | ~ring.btw(N1,N2,N3)
invariant [3084] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> in_s1(N1) | ring.btw(N1,N2,N3) | ~s1(N3,N1) | ~s2(N3,N2)
invariant [3085] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | org=N2 | ~s1(N1,N2) | ~s1(N2,N3)
invariant [3086] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> org=N3 | ~s1(N1,N3) | ~s2(N1,N2) | ~ring.btw(N1,N2,N3)
invariant [3087] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> a(N1) | in_s1(N2) | ~s1(N3,N1) | ~s2(N3,N2)
invariant [3088] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> a(N1) | ring.btw(N1,N2,N3) | ~s1(N3,N1) | ~s2(N3,N2)
invariant [3089] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N1,N3) | ~s1(N3,N2) | ~s2(N3,N2) | ~ring.btw(N1,N2,N3)
invariant [3090] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> a(N1) | in_s1(N2) | ~s1(N3,N2) | ~s2(N3,N1)
invariant [3091] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | ~s1(N2,N3) | ~s1(N3,N1) | ~s2(N3,N2)
invariant [3092] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N1,N3) | ~s1(N3,N2) | ~ring.btw(N1,N2,N3) | ~other=N3
invariant [3093] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> s1(N3,N2) | ring.btw(N1,N2,N3) | ~s1(N2,N2) | ~s2(N3,N1)
invariant [3094] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N1,N1) | ~s1(N2,N3) | ~s2(N2,N3)
invariant [3095] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> reach(N3) | ring.btw(N1,N2,N3) | ~s1(N2,N3) | ~s1(N3,N1)
invariant [3096] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> org=N3 | ~s1(N1,N3) | ~s1(N3,N2) | ~ring.btw(N1,N2,N3)
invariant [3097] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N1,N3) | ~s2(N1,N2) | ~ring.btw(N1,N2,N3) | ~other=N3
invariant [3098] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N1,N3) | ~s1(N2,N1) | ~s1(N3,N2) | ~ring.btw(N1,N2,N3)
invariant [3099] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ring.btw(N1,N2,N3) | ~s1(N1,N2) | ~s1(N2,N3) | ~other=N2
invariant [3100] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N1,N3) | ~s1(N2,N1) | ~s2(N1,N2) | ~ring.btw(N1,N2,N3)
invariant [3101] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N1,N3) | ~s1(N3,N2) | ~s2(N3,N1) | ~ring.btw(N1,N2,N3)
invariant [3102] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> reach(N2) | ring.btw(N1,N2,N3) | ~s1(N1,N2) | ~s2(N1,N3)
invariant [3103] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> in_s1(N3) | ring.btw(N1,N2,N3) | ~s1(N2,N3) | ~s2(N2,N1)
invariant [3104] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> ~s1(N2,N1) | ~s1(N3,N2) | ~ring.btw(N1,N2,N3) | ~other=N2
invariant [3105] forall N1:node, N2:node, N3:node. N1 ~= N2 & N1 ~= N3 & N2 ~= N3 -> s1(N1,N2) | ~s1(N3,N1) | ~s2(N1,N3) | ~org=N2
